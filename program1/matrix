#!/bin/bash
#Author: Zach Reed
#Description:  Matrix Script
#Date: 4/22/2019
#--------------------------------------------

#-------------------------------------------
#Temporary Files Declarations  in /tmp
row_n="row_n"
row_n2="row_n2"
col_n="col_n"
col_n2="col_n2"
tmp_mtx="tmp_mtx"
tmp_mtx2="tmp_mtx2"
col_tmp="col_tmp"
row_tmp="row_tmp"
col_c="col_c"
col_idx="col_idx"
row_c="row_c"
idx="idx"
input_mtx="input_mtx"
sum="sum"
mul="mul"
mul_mtxr="mul_mtxr"
mul_mtx="mul_mtx"
mean="mean"
mtx_in="mtx_in"
#-------------------------------------------
#Function:	Error Echo
#Description:   Echo's error message to stderr
#-------------------------------------------

trap "rm -f $mul $mul_mtx $mul_mtxr $row_n2 $col_n $tmp_mtx2 $mean $mtx_in $tmp_mtx $tran_mtx $col_tmp $row_tmp $col_n $row_n $row_c $col_c $idx $input_mtx $sum; exit 1" INT HUP TERM

echoerror() {
	>&2 echo "$@"
}


#-----------------------------------------------------------------
#Dimensions Function
#Description:   prints out returns from n_row() and n_col(), respectively.
#Preconditions: $1 contains either matrix passed in command line or read by mtx_tmp
#Postconditions: returns 0
#-----------------------------------------------------------------
dims(){
	#Get Column Size ---------
	read  c_line<$1
	col_n=0
        for i in $c_line
	do
		((++col_n))
	done
	
	#Get Row Size ------------
	row_n=0
	while read -r r_line
	do
		((++row_n))
	done < "$1" 
	
	#Print Values -----------
	echo "$row_n $col_n"
}

#------------------------------------------------------------------
#Transpose Function
#Description: Transposes matrix by the columns and rows
#Preconditions: $1 contains mtx_tmp from an user-input matrix or matrix file
#------------------------------------------------------------------
transpose () {
	#Get Column Size ---------
        read  c_line<$1
        col_n=0
        for i in $c_line
        do
                ((++col_n))
        done

        #Get Row Size ------------
        row_n=0
        while read -r r_line
        do
		if [[ $row_n == 0 ]]
		then
		echo -n "$r_line" >> $tmp_mtx

		else
		echo -n -e '\t' "$r_line" >> $tmp_mtx
                fi
		((++row_n))
	done < "$1" 

	#Loop through and echo values ----------
	col_c=0
	col_idx=0	
	read t_line<$tmp_mtx

	while [[ $col_idx < $col_n ]]	
	do
		col_c=0
		row_c=0	
		for i in $t_line
		do
			#calculate ajustment for reading from row
			idx=0
			idx=$(($col_c * $col_n))
			idx=$(($idx + $col_idx))

			#if row count is equal to row adjustor
			if [[ $row_c == $idx ]]
			then
				((++col_c))
				if [[ $col_c == 1 ]]
				then
					#echo -n "$i" >> $1
					printf "%d" $i				

				else
				#echo -n -e '\t' "$i" >> $1
					printf "\t%d" $i
				fi 
			fi
			((++row_c))
		done
		printf "\n"
		((++col_idx))
	done
	rm $tmp_mtx 
}

#------------------------------------------------------------------
#Mean Function
#Description: Transposes matrix by the columns and rows
#Preconditions: $1 contains mtx_tmp from an user-input matrix or matrix file
#------------------------------------------------------------------
mean() {
	#Get Column Size --------
        read  c_line<$1
        col_n=0
        for i in $c_line
        do
                ((++col_n))
        done
	
	#Get Row Size ------------
        row_n=0
        while read -r r_line
        do
                echo  "$r_line" >> $tmp_mtx
                ((++row_n))        
        done < "$1"

	
        #Read Each line to Row ---
	col_c=0
	idx=1
	for ((i=0 ; i<$col_n ; i++))
	do
		#cut the columns ---------------------
		if [[ $i == 0 ]]
		then
			cut -f $idx $tmp_mtx > $col_tmp
		else
			cut -f $idx $tmp_mtx >> $col_tmp
		fi
		cat $col_tmp | tr '\n' '\t' > $row_tmp
		echo -e "" >> $row_tmp

		#sum the columns stored as rows ------
		sum=0
		read cline<$row_tmp
		for j in $cline
		do
			sum=$(($j + $sum))
		done
		
		#calculate the mean of the sum -------
		mean=0	
		mean=$((($sum+($row_n/2)*( ($sum>0)*2-1))/$row_n))	
		if [[ $i == 0 ]]               
                then
                	printf "%d" $mean

                else
                	printf "\t%d" $mean
                fi
		rm $row_tmp
		rm $col_tmp
		idx=$(($idx + 1))
	done 
	printf "\n"
	rm $tmp_mtx

}
#------------------------------------------------------------------
#Add Function
#Description: Adds 2 Matrices by the columns and rows
#Preconditions: $1 contains mtx_tmp from an user-input matrix or matrix file
#------------------------------------------------------------------
add() {

	#Get Column Size M1 --------
        read  c_line<$1
        col_n=0
        for i in $c_line
        do
                ((++col_n))
        done

        #Get Row Size M1 ------------
        row_n=0
        while read -r r_line
        do
                echo  "$r_line" >> $tmp_mtx
                ((++row_n))
        done < "$1"

	#Get Column Size M2 --------
        read  c2_line<$2
        col_n2=0
        for i in $c2_line
        do
                ((++col_n2))
        done

        #Get Row Size M2 ------------
        row_n2=0
        while read -r r2_line
        do
                echo  "$r2_line" >> $tmp_mtx2
                ((++row_n2))
        done < "$2"
	
	# M1 and M2 are not same dimensions ------------
	if [[ $col_n != $col_n2 ]]
	then
		rm $tmp_mtx2
		rm $tmp_mtx
		return 2
	
	elif [[ $row_n != $row_n2 ]]
	then
		rm $tmp_mtx2
		rm $tmp_mtx
		return 2
	# M1 and M2 are same dimensions -----------------
	else
		while read row1 <&3 && read row2 <&4;
		do
			echo "$row1" >> $input_mtx
			echo "$row2" >> $input_mtx
			
		#Put rows to be added in same file and cut the columns
		for ((idx=1 ; idx<=$col_n ; idx++))
		do
			if [[ $idx == 1 ]]
                	then
                      		cut -f $idx $input_mtx > $col_tmp
              		else
                       		cut -f $idx $input_mtx >> $col_tmp
     			fi	
                		
			cat $col_tmp | tr '\n' '\t' > $row_tmp
                	
			#sum the cut columns
			sum=0
			read cline<$row_tmp
			for j in $cline
               		do
				sum=$(($sum + $j))
			done
			
			if [[ $idx == 1 ]]
			then
				printf "%d" $sum
			
			else
				printf "\t%d" $sum
			fi
			rm $col_tmp
			rm $row_tmp
		done
		printf "\n"
		rm $input_mtx
		done 3<"$tmp_mtx" 4<"$tmp_mtx2"
		rm $tmp_mtx2
		rm $tmp_mtx
		return 0
	fi
}

#------------------------------------------------------------------
#Multiply  Function
#Description: Multiplies 2 Matrices
#Preconditions: $1 amd $2 contain readable matrices
#Postconditions: Returns 2 if matrices are invalid
#------------------------------------------------------------------
multiply() {

        #Get Column Size M1 --------
        read  c_line<$1
        col_n=0
        for i in $c_line
        do
                ((++col_n))
        done

        #Get Row Size M1 ------------
        row_n=0
        while read -r r_line
        do
                echo  "$r_line" >> $tmp_mtx
                ((++row_n))
        done < "$1"

        #Get Column Size M2 --------
        read  c2_line<$2
        col_n2=0
        for i in $c2_line
        do
                ((++col_n2))
        done

        #Get Row Size M2 ------------
        row_n2=0
        while read -r r2_line
        do
                echo  "$r2_line" >> $tmp_mtx2
                ((++row_n2))
        done < "$2"

        #M1 and M2 are not same dimensions ------------
        if [[ $row_n2 != $col_n ]]
        then
                rm $tmp_mtx2
                rm $tmp_mtx
                return 2

	# M1 and M2 are same dimensions -----------------
        else
                while read row1 <&3;
		do
			echo "$row1" >> $row_tmp
			idx=0
			# for each column in $2 to be multiplied by a row in $1
			while [[ $col_n2 > $idx ]]
			do
				((++idx))
				if [[ $idx == 1 ]]
				then
					cut -f $idx $tmp_mtx2 > $col_tmp
				else
					cut -f $idx $tmp_mtx2 >> $col_tmp
				fi
				
				read line<$row_tmp
				cat $col_tmp | tr '\n' '\t' > $input_mtx
				echo "" >> $input_mtx
				cat $row_tmp | tr '\n' '\t' >> $input_mtx
				echo "" >> $input_mtx
				sum=0
				 # Iterate through each row1[], col2[] pair and multiply
				for (( j=1 ; j<=$col_n; j++ ))
				do
					# cut row1 and add to each col2 to multiply
					cut -f $j $input_mtx > $mul_mtx
					cat $mul_mtx | tr '\n' '\t' >  $mul_mtxr
					mul=1
					read mul_line<$mul_mtxr
					#iterate through each created line
					for k in $mul_line
					do		
						mul=$(expr "$mul" '*' "$k")
					done
					sum=$(($sum + $mul))
					rm $mul_mtxr
					rm $mul_mtx
				done
				# If conditions for printing sum of matrix multiplication
				if [[ $idx == $col_n2 ]]
				then
					printf "%d\n" $sum
				else
					printf "%d\t" $sum
				fi

				rm $col_tmp
				rm $input_mtx
			done
			rm $row_tmp
		done 3<"$tmp_mtx"
	
                rm $tmp_mtx2
                rm $tmp_mtx
                return 0

	fi
}
#------------------------------------------------------------------
#Main Function
#Description: Handles if statments for function call passed as argument
#------------------------------------------------------------------
main() {
	# Dimensions Case ---------------------------------
	if [[ $1 == "dims" ]]
	then
		#If No Matrix File ------------
		if [[ $# == "1" ]]
		then
			while read -r line
			do
				echo "$line" >> $mtx_in
			done
			dims $mtx_in
       			rm $mtx_in
			exit 0
	
		#IF Matrix File ---------------
		elif [[ $# == "2" && -r "$2" ]]
		then
 			dims $2
			exit 0
	
		#If Error Case ----------------
		else
			echoerror "Invalid arguments: " $# 
			exit 2  
		fi	
	# Transpose Case -----------------------------------
	elif [[ $1 == "transpose" ]]
	then 
	        #If No Matrix File ------------
                if [[ $# == "1" ]]
                then
                        while read -r line
                        do
                                echo "$line" >> $mtx_in
                        done

                        transpose $mtx_in
			rm $mtx_in
                        exit 0

                #IF Matrix File ---------------
                elif [[ $# == "2" && -r "$2" ]]
                then
                        transpose $2
                        exit 0

                #If Error Case ----------------
                else
                        echoerror "Invalid arguments: " $#
                        exit 2
                fi

	# Mean Case -----------------------------------
        elif [[ $1 == "mean" ]]
        then
                #If No Matrix File ------------
                if [[ $# == "1" ]]
                then
                        while read -r line
                        do
                                echo "$line" >> $mtx_in
                        done
                        mean $mtx_in
                        rm $mtx_in
                        exit 0

                #IF Matrix File ---------------
                elif [[ $# == "2" && -r "$2" ]]
                then
                        mean $2
                        exit 0

                #If Error Case ----------------
                else
                        echoerror "Invalid arguments: " $#
                        exit 2
                fi

	#Add Case ---------------------------------------
	elif [[ $1 == "add" ]]
	then 
                #IF Matrix File ---------------
                if [[ $# == "3" && -r "$2" && -r "$3" ]]
                then
                        add $2 $3
			
			if [[ $? != 0 ]]
			then 
				echoerror "Invalid Matrix Sizes" $#
				exit 2
                        else
				exit 0
			fi

                #If Error Case ----------------
                else
                        echoerror "Invalid arguments: " $#
                        exit 2
                fi

	#Multiply Case ---------------------------------------
        elif [[ $1 == "multiply" ]]
        then
                #IF Matrix File ---------------
                if [[ $# == "3" && -r "$2" && -r "$3" ]]
                then
                        multiply $2 $3

                        if [[ $? != 0 ]]
                        then
                                echoerror "Invalid Matrix Sizes" $#
                                exit 2
                        else
                                exit 0
                        fi

                #If Error Case ----------------
                else
                        echoerror "Invalid arguments: " $#
                        exit 2
                fi
		
	#Else Function call was incorrectly typed -------
	else 
		echoerror "Syntax error: " $1
		exit 2
	fi 
}

main $1 $2 $3
