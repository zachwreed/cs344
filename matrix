#!/bin/bash
#Author: Zach Reed
#Description:  Matrix Script
#Date: 4/22/2019
#--------------------------------------------

#-------------------------------------------
#Temporary Files Declarations  in /tmp
row_n=$(mktemp /tmp/row_n.XXXXXXXX)
col_n=$(mktemp /tmp/col_n.XXXXXXXX)
mtx_tmp=$(mktemp /tmp/mtx_tmp.XXXXXXXX)
tran_mtx=$(mktemp /tmp/trans_mtx.XXXXXXXX)
col_c=$(mktemp /tmp/col_c.XXXXXXXX)
col_idx=$(mktemp /tmp/col_idx.XXXXXXXX)
row_c=$(mktemp /tmp/row_c.XXXXXXXX)
idx=$(mktemp /tmp/idx.XXXXXXXX)
arr=$(mktemp /tmp/arr.XXXXXXXX)
sum=$(mktemp /tmp/sum.XXXXXXXX)
#-------------------------------------------
#Function:	Error Echo
#Description:   Echo's error message to stderr
#-------------------------------------------

trap "rm -f $mtx_tmp $tran_mtx $col_n $row_n $row_c $col_c $idx $arr" INT HUP TERM

echoerror() {
	>&2 echo "$@"
}


#-----------------------------------------------------------------
#Dimensions Function
#Description:   prints out returns from n_row() and n_col(), respectively.
#Preconditions: $1 contains either matrix passed in command line or read by mtx_tmp
#Postconditions: returns 0
#-----------------------------------------------------------------
dims(){
	#Get Column Size ---------
	read  c_line<$1
	col_n=0
        for i in $c_line
	do
		((++col_n))
	done
	
	#Get Row Size ------------
	row_n=0
	while read -r r_line
	do
		((++row_n))
	done < "$1" 
	
	#Print Values -----------
	echo "$row_n $col_n"
}

#------------------------------------------------------------------
#Transpose Function
#Description: Transposes matrix by the columns and rows
#Preconditions: $1 contains mtx_tmp from an user-input matrix or matrix file
#------------------------------------------------------------------
transpose () {
	#Get Column Size ---------
        read  c_line<$1
        col_n=0
        for i in $c_line
        do
                ((++col_n))
        done

        #Get Row Size ------------
        row_n=0
        while read -r r_line
        do
		if [[ $row_n == 0 ]]
		then
		echo -n "$r_line" >> $tran_mtx

		else
		echo -n -e '\t' "$r_line" >> $tran_mtx
                fi
		((++row_n))
        done < "$1"

	#Loop through and echo values ----------
	col_c=0
	col_idx=0	
	read t_line<$tran_mtx

	while [[ $col_idx < $col_n ]]	
	do
		col_c=0
		row_c=0	
		for i in $t_line
		do
			idx=0
			idx=$(($col_c * $col_n))
			idx=$(($idx + $col_idx))

			if [[ $row_c == $idx ]]
			then
				((++col_c))
				if [[ $col_c == 1 ]]
				then
					#echo -n "$i" >> $1
					printf "%d" $i				

				else
				#echo -n -e '\t' "$i" >> $1
					printf "\t%d" $i
				fi 
			fi
			((++row_c))
		done
		printf "\n"
		((++col_idx))
	done 
}

#------------------------------------------------------------------
#Mean Function
#Description: Transposes matrix by the columns and rows
#Preconditions: $1 contains mtx_tmp from an user-input matrix or matrix file
#------------------------------------------------------------------
mean() {
	#Get Column Size --------
        read  c_line<$1
        col_n=0
        for i in $c_line
        do
                ((++col_n))
        done
	
        #Get Row Size ------------
	row_n=0
	idx=0
	tmp=0
        while read -r r_line
        do
                for i in $r_line
		do
			if [[ row_n == 0 ]]
			then
				
			
			else
				echo "arr[$idx]" >> $tmp
				tmp=$(($tmp + $i))	
			fi		
			((++idx))
		done
		idx=0
                ((++row_n))
        done < "$1"
	
	row_c=0
	idx=0
	while [[ idx < col_n ]]
	do
		printf "%d" arr[$idx]
		((++idx))
	done 

	# 	

}

#------------------------------------------------------------------
#Main Function
#Description: Handles if statments for function call passed as argument
#------------------------------------------------------------------
main() {
	# Dimensions Case ---------------------------------
	if [[ $1 == "dims" ]]
	then
		#If No Matrix File ------------
		if [[ $# == "1" ]]
		then
			while read -r line
			do
				echo "$line" >> $mtx_tmp
			done
			dims $mtx_tmp
			exit 0	
	
		#IF Matrix File ---------------
		elif [[ $# == "2" && -r "$2" ]]
		then
 			dims $2
			exit 0
	
		#If Error Case ----------------
		else
			echoerror "Invalid arguments: " $# 
			exit 2  
		fi	
	# Transpose Case -----------------------------------
	elif [[ $1 == "transpose" ]]
	then 
	        #If No Matrix File ------------
                if [[ $# == "1" ]]
                then
                        while read -r line
                        do
                                echo "$line" >> $mtx_tmp
                        done
                        transpose $mtx_tmp
                        exit 0

                #IF Matrix File ---------------
                elif [[ $# == "2" && -r "$2" ]]
                then
                        transpose $2
                        exit 0

                #If Error Case ----------------
                else
                        echoerror "Invalid arguments: " $#
                        exit 2
                fi

	# Mean Case -----------------------------------
        elif [[ $1 == "mean" ]]
        then
                #If No Matrix File ------------
                if [[ $# == "1" ]]
                then
                        while read -r line
                        do
                                echo "$line" >> $mtx_tmp
                        done
                        mean $mtx_tmp
                        exit 0

                #IF Matrix File ---------------
                elif [[ $# == "2" && -r "$2" ]]
                then
                        mean $2
                        exit 0

                #If Error Case ----------------
                else
                        echoerror "Invalid arguments: " $#
                        exit 2
                fi

	#Add Case ---------------------------------------


		
	#Else Function call was incorrectly typed -------
	else 
		echoerror "Syntax error: " $1
		exit 2
	fi 




}
main $1 $2 $3
