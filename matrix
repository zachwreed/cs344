#!/bin/bash
#Author: Zach Reed
#Description:  Matrix Script
#Date: 4/22/2019
#--------------------------------------------

#-------------------------------------------
#Temporary Files Declarations  in /tmp
row_n=$(mktemp /tmp/row_n.XXXXXXXX)
col_n=$(mktemp /tmp/col_n.XXXXXXXX)
mtx_tmp=$(mktemp /tmp/mtx_tmp.XXXXXXXX)
tran_mtx=$(mktemp /tmp/trans_mtx.XXXXXXXX)
col_c=$(mktemp /tmp/col_c.XXXXXXXX)
col_idx=$(mktemp /tmp/col_idx.XXXXXXXX)
row_c=$(mktemp /tmp/row_c.XXXXXXXX)

#-------------------------------------------
#Function:	Error Echo
#Description:   Echo's error message to stderr
#-------------------------------------------

trap "rm -f $mtx_tmp $tran_mtx $col_n $row_n $row_c $col_c" INT HUP TERM

echoerror() {
	>&2 echo "$@"
}


#-----------------------------------------------------------------
#Dimensions Function
#Description:   prints out returns from n_row() and n_col(), respectively.
#Preconditions: $1 contains either matrix passed in command line or read by mtx_tmp
#Postconditions: returns 0
#-----------------------------------------------------------------
dims(){
	#Get Column Size ---------
	read  c_line<$1
	col_n=0
        for i in $c_line
	do
		((++col_n))
	done
	
	#Get Row Size ------------
	row_n=0
	while read -r r_line
	do
		((++row_n))
	done < "$1" 
	
	#Print Values -----------
	echo "$row_n $col_n"
}

#------------------------------------------------------------------
#Transpose Function
#Description: Transposes matrix by the columns and rows
#Preconditions: $1 contains mtx_tmp from an user-input matrix or matrix file
#------------------------------------------------------------------
transpose () {
	#Get Column Size ---------
        read  c_line<$1
        col_n=0
        for i in $c_line
        do
                ((++col_n))
        done

        #Get Row Size ------------
        row_n=0
        while read -r r_line
        do
		if [[ $row_n == 0 ]]
		then
		echo -n "$r_line" >> $tran_mtx

		else
		echo -n -e '\t' "$r_line" >> $tran_mtx
                fi
		((++row_n))
        done < "$1"

	#Write to Temp File -----
	col_c=0
	col_idx=0	
	row_c=0
	read t_line<$tran_mtx
	while [[ $col_c < $col_n ]]	
	do	
		for i in $t_line
		do
			idx=$((col_c*col_n))
			idx=$((idx+col_idx))
			if [[ $i == $idx ]]
			then
				echo -n e '\t' "$i"
				(++col_c) 
			fi
		done
		(++col_idx)
	done 
	
	#for ((i=0 ; i<$col_n ; i++));
	#do
	#	printf '%s\n' "${t_line[0]}"
	#done
}


#------------------------------------------------------------------
#Main Function
#Description: Handles if statments for function call passed as argument
#------------------------------------------------------------------
main() {
	# Dimensions Case ---------------------------------
	if [[ $1 == "dims" ]]
	then
		#If No Matrix File ------------
		if [[ $# == "1" ]]
		then
			while read -r line
			do
				echo "$line" >> $mtx_tmp
			done
			dims $mtx_tmp
			exit 0	
	
		#IF Matrix File ---------------
		elif [[ $# == "2" && -r "$2" ]]
		then
 			dims $2
			exit 0
	
		#If Error Case ----------------
		else
			echoerror "Invalid arguments: " $# 
			exit 2  
		fi	
	# Transpose Case -----------------------------------
	elif [[ $1 == "transpose" ]]
	then 
	        #If No Matrix File ------------
                if [[ $# == "1" ]]
                then
                        while read -r line
                        do
                                echo "$line" >> $mtx_tmp
                        done
                        transpose $mtx_tmp
                        exit 0

                #IF Matrix File ---------------
                elif [[ $# == "2" && -r "$2" ]]
                then
                        transpose $2
                        exit 0

                #If Error Case ----------------
                else
                        echoerror "Invalid arguments: " $#
                        exit 2
                fi
	
	#Else Function call was incorrectly typed -------
	else 
		echoerror "Syntax error: " $1
		exit 2
	fi 




}
main $1 $2 $3
